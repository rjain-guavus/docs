#+TITLE: Introduction to Pandas
#+AUTHOR: Rohit Jain
#+EMAIL: rohit.jain@guavus.com
#+BABEL: :cache yes :results output :exports both :tangle yes

Pandas is a tool for working with data effectively within Python. This
file is an Introduction to the library. Basically I am updating this as
I learn along. This is a org-mode doc with org-babel. Hence, it can be
executed within emacs. If you check out the raw file, it should contain
the results of most of the source block executions.

* Installation

It depends on a current version of numpy, so one'll need that
installed. It can be installed on mac simply by the following command
#+BEGIN_SRC sh
pip install pandas
#+END_SRC

After the above, fire up an instance of the python repl and verify that
pandas is importable by trying the following:

#+BEGIN_SRC python
import pandas
#+END_SRC

#+RESULTS:
: None

If the above import fails, then it might be possible that an old version
of numpy is installed on the system. In that case, upgrade the required
dependencies. The error message will give a hint about which dependency
is causing issues.

* Motivation

Working with structured data and extracting stats like counts, top
counts, etc can be hairy in vanilla python. Libs like defaultdict,
Counters etc can make it a bit easier, but still the focus remains a bit
on how to get something done instead of actually getting it done.

* Usage
** Dataframes

Pandas has a bunch of nice abstractions that help with that. Enter
Dataframes, which essentially represent some tabular data. Say we have
the following bunch of dicts in an array, essentially a list of records
and we want to create a table out of these.

The data used below is available along with this file. It was obtained
from the site http://developer.usa.gov/1usagov as a realtime stream.

#+BEGIN_SRC python :session intro
path = "usagov_data.dat"

import json
records = [json.loads(line) for line in open(path)]
# records = [{'f1':'asdf', 'f2':12}, {'f1':'qwer', 'f2':23}]

from pandas import DataFrame, Series
import pandas as pd; import numpy as np

frame = DataFrame(records)
frame
#+END_SRC

#+RESULTS:

We can now access the elements as following:

#+BEGIN_SRC python :session intro
frame['tz']
#+END_SRC

#+RESULTS:
#+begin_example
0          America/Chicago
1      America/Puerto_Rico
2         America/New_York
3          America/Chicago
4                      NaN
5            Europe/London
6      America/Los_Angeles
7                      NaN
8      America/Los_Angeles
9         America/New_York
10                     NaN
11        America/New_York
12       Asia/Kuala_Lumpur
13                     NaN
14                     NaN
15           Europe/Prague
16     America/Los_Angeles
17                     NaN
18        America/New_York
19          Asia/Singapore
20         America/Chicago
21                     NaN
22       Asia/Kuala_Lumpur
23             Europe/Rome
24         America/Chicago
25        America/New_York
26         America/Chicago
27          Asia/Singapore
28            Africa/Cairo
29           Europe/Berlin
              ...
31    America/Indianapolis
32         America/Chicago
33         America/Chicago
34        America/New_York
35        America/New_York
36       Asia/Kuala_Lumpur
37          Asia/Chongqing
38       Asia/Kuala_Lumpur
39         America/Phoenix
40           Europe/Berlin
41         America/Chicago
42           Europe/London
43           Asia/Istanbul
44              Asia/Seoul
45            Africa/Cairo
46        America/New_York
47       Asia/Kuala_Lumpur
48     America/Los_Angeles
49           Europe/Berlin
50                     NaN
51          Asia/Singapore
52            Europe/Paris
53       Asia/Kuala_Lumpur
54           Europe/Berlin
55        America/New_York
56            Africa/Cairo
57        America/New_York
58         America/Chicago
59     America/Los_Angeles
60           Europe/London
Name: tz, dtype: object
#+end_example

The output of frame is usually a summary view for large dataframe
objects. When accessing a column from a dataframe, the output is a
series object. It has a method "value_counts" that gives us the counts
of the values of the column in sorted order.

#+BEGIN_SRC python :session intro
tz_counts = frame['tz'].value_counts()
tz_counts[:10]
#+END_SRC

#+RESULTS:
#+begin_example
America/New_York       10
America/Chicago         9
Asia/Kuala_Lumpur       6
America/Los_Angeles     5
Europe/Berlin           5
Europe/London           3
Africa/Cairo            3
Asia/Singapore          3
America/Puerto_Rico     1
America/Phoenix         1
Name: tz, dtype: int64
#+end_example

We can do some munging for filling in missing fields and sanitizing the
data. "fillna" function can fill in missing (NA) values. Empty strings
can be filled in by boolean indexing in the style of R.

#+BEGIN_SRC python :session intro
arbit_graph = "graph.png"

clean_tz = frame['tz'].fillna('Missing')
clean_tz[clean_tz == ''] = 'Unknown'
tz_counts = clean_tz.value_counts()
tz_counts[:10]
plot = tz_counts[:10].plot(kind='barh', rot=0)
plot.get_figure().savefig(arbit_graph)
arbit_graph
#+END_SRC

#+RESULTS:

The field "a" in the above dataframe contains the useragent. We can mess
around with that a bit by splitting off the first token and checking the
counts of those.

"dropna" can be used to get rid of the missing fields.

#+BEGIN_SRC python :session intro
results = Series([x.split()[0] for x in frame.a.dropna()])
results[:5]
results.value_counts()[:8]
#+END_SRC

#+RESULTS:
: Mozilla/5.0    59
: Mozilla/4.0     2
: dtype: int64

Lets now try to decompose the top timezones into Windows and non-Windows
users. Instead of using a uaparser, lets assume that a Windows UA
contains that string inside the UA. We get rid of the missing UAs by
using "notnull"

#+BEGIN_SRC python :session intro
cframe = frame[frame.a.notnull()]
os = np.where(cframe['a'].str.contains('Windows'),
               'Windows', 'Not Windows')
by_tz_os = cframe.groupby(['tz', os])
agg_counts = by_tz_os.size().unstack().fillna(0)
agg_counts
#+END_SRC

#+RESULTS:
#+begin_example
                      Not Windows  Windows
tz
Africa/Cairo                    0        3
America/Chicago                 5        4
America/Indianapolis            1        0
America/Los_Angeles             1        4
America/New_York                8        2
America/Phoenix                 1        0
America/Puerto_Rico             1        0
Asia/Chongqing                  0        1
Asia/Istanbul                   1        0
Asia/Kuala_Lumpur               6        0
Asia/Seoul                      0        1
Asia/Singapore                  2        1
Europe/Berlin                   4        1
Europe/London                   1        2
Europe/Paris                    1        0
Europe/Prague                   1        0
Europe/Rome                     1        0
#+end_example

Next,
